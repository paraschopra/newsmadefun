"use client"

import { useState } from "react"
import Landing from "@/components/landing"
import Game from "@/components/game"
import Result from "@/components/result"
import { fetchHeadlines, generateFakeHeadline } from "@/lib/news-service"

type Headline = {
  id: number
  text: string
  isReal: boolean
  fullStory?: string
  source?: string
  url?: string
  category?: string
}

type GameState = "landing" | "playing" | "result"

export default function Home() {
  const [gameState, setGameState] = useState<GameState>("landing")
  const [headlines, setHeadlines] = useState<Headline[]>([])
  const [currentRound, setCurrentRound] = useState(1)
  const [score, setScore] = useState(0)
  const [selectedHeadline, setSelectedHeadline] = useState<Headline | null>(null)
  const [correctHeadline, setCorrectHeadline] = useState<Headline | null>(null)
  const [loading, setLoading] = useState(false)
  // Track shown headlines to avoid repetition
  const [shownHeadlines, setShownHeadlines] = useState<Set<string>>(new Set())
  // Store the selected category
  const [category, setCategory] = useState<string>("general")

  const TOTAL_ROUNDS = 5

  const startGame = async (selectedCategory: string) => {
    setGameState("playing")
    setScore(0)
    setCurrentRound(1)
    // Reset shown headlines when starting a new game
    setShownHeadlines(new Set())
    // Set the selected category
    setCategory(selectedCategory)
    await prepareNextRound(selectedCategory)
  }

  // Update the prepareNextRound function to use the category
  const prepareNextRound = async (selectedCategory?: string) => {
    setLoading(true)
    try {
      // Use the provided category or the stored one
      const currentCategory = selectedCategory || category

      // We'll fetch headlines for the selected category
      const fetchCount = 50
      const realHeadlines = await fetchHeadlines(fetchCount, currentCategory)

      // Find a headline we haven't shown yet
      let selectedHeadline = null
      for (const headline of realHeadlines) {
        if (!shownHeadlines.has(headline.title)) {
          selectedHeadline = headline
          break
        }
      }

      // If all headlines have been shown already, use the first one
      if (!selectedHeadline) {
        selectedHeadline = realHeadlines[0]
      }

      // Add this headline to our shown headlines set
      setShownHeadlines((prev) => {
        const updated = new Set(prev)
        updated.add(selectedHeadline.title)
        return updated
      })

      const realHeadline = {
        id: 1,
        text: selectedHeadline.title,
        isReal: true,
        fullStory: selectedHeadline.description,
        source: selectedHeadline.source,
        url: selectedHeadline.url,
        category: selectedHeadline.category,
      }

      // Generate a fake headline based on the real one
      const fakeHeadlineText = await generateFakeHeadline(realHeadline.text)
      const fakeHeadline = {
        id: 2,
        text: fakeHeadlineText,
        isReal: false,
        fullStory: "This headline was generated by AI and is not real.",
        category: realHeadline.category,
      }

      // Randomly order the headlines
      const shuffledHeadlines = Math.random() > 0.5 ? [realHeadline, fakeHeadline] : [fakeHeadline, realHeadline]

      setHeadlines(shuffledHeadlines)
      setCorrectHeadline(realHeadline)
    } catch (error) {
      console.error("Error preparing round:", error)
      // Fallback headlines in case API fails
      const fallbackHeadlines = [
        {
          id: 1,
          text: "Global markets rally as inflation fears ease",
          isReal: true,
          fullStory:
            "Stock markets around the world saw significant gains today as new economic data suggested inflation may be slowing down, easing concerns about aggressive interest rate hikes.",
          source: "Financial Times",
          url: "https://www.ft.com",
          category: category,
        },
        {
          id: 2,
          text: "Global markets plunge as inflation surges to 10-year high",
          isReal: false,
          fullStory: "This headline was generated by AI and is not real.",
          category: category,
        },
      ]
      setHeadlines(fallbackHeadlines)
      setCorrectHeadline(fallbackHeadlines[0])
    } finally {
      setLoading(false)
    }
  }

  const handleSubmit = (selectedId: number | null) => {
    if (selectedId === null) return

    const selected = headlines.find((h) => h.id === selectedId) || null
    setSelectedHeadline(selected)

    if (selected && selected.isReal) {
      setScore(score + 1)
    }

    setGameState("result")
  }

  const handleNextRound = () => {
    if (currentRound < TOTAL_ROUNDS) {
      setCurrentRound((prev) => prev + 1)
      setGameState("playing")
      prepareNextRound()
    } else {
      // Game over
      setGameState("landing")
    }
  }

  return (
    <main>
      {gameState === "landing" && <Landing onStart={startGame} />}

      {gameState === "playing" && (
        <Game
          headlines={headlines}
          onSubmit={handleSubmit}
          round={currentRound}
          totalRounds={TOTAL_ROUNDS}
          score={score}
          loading={loading}
          category={category}
        />
      )}

      {gameState === "result" && selectedHeadline && correctHeadline && (
        <Result
          selected={selectedHeadline}
          correct={correctHeadline}
          onNext={handleNextRound}
          isLastRound={currentRound === TOTAL_ROUNDS}
          score={score}
          totalRounds={TOTAL_ROUNDS}
        />
      )}
    </main>
  )
}
